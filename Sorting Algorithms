#three fastest sorting algorithms
#need to test them and create their versions for decreasing order
#SHELL SORT ALGORITHM

def shellSort(price, name):
    inc = len(price) // 2
    while inc:
        for i in range(len(price)):
            j = i
            temp = price[i]
            temp2= name[i]
            #add here if need to be sorted
            while j >= inc and price[j-inc] > temp:
                price[j] = price[j - inc]
                name[j] = name[j- inc]
                #add here if need to be sorted
                j -= inc
            price[j] = temp
            name[j] = temp2
            #add here if need to be sorted
        inc = inc//2 if inc//2 else (0 if inc==1 else 1)

        
#QUICK SORT ALGORITHM

def quickSort(alist, name):#add here
   quickSortHelper(alist,0,len(alist)-1, name)#add here

def quickSortHelper(alist,first,last, name):#add here
   if first<last:

       splitpoint = partition(alist,first,last, name)#add here

       quickSortHelper(alist,first,splitpoint-1, name)#add here
       quickSortHelper(alist,splitpoint+1,last, name)#add here


def partition(alist,first,last,name):#add here
   pivotvalue = alist[first]

   leftmark = first+1
   rightmark = last

   done = False
   while not done:

       while leftmark <= rightmark and alist[leftmark] <= pivotvalue:
           leftmark = leftmark + 1

       while alist[rightmark] >= pivotvalue and rightmark >= leftmark:
           rightmark = rightmark -1

       if rightmark < leftmark:
           done = True
       else:
           temp = alist[leftmark]
           alist[leftmark] = alist[rightmark]
           alist[rightmark] = temp
           temp2 = name[leftmark]
           name[leftmark] = name[rightmark]
           name[rightmark] = temp2
           #add here

   temp = alist[first]
   alist[first] = alist[rightmark]
   alist[rightmark] = temp
   temp2 = name[first]
   name[first] = name[rightmark]
   name[rightmark] = temp2
   #add here


   return rightmark

    
#MERGE SORT ALGORITHM

def mergeSort(price,name):#add here
    #print("Splitting ",price)
    if len(price)>1:
        mid = len(price)//2
        lefthalf = price[:mid]
        righthalf = price[mid:]
        lefthalf2 = name[:mid]
        righthalf2 = name[mid:]
        #add here

        mergeSort(lefthalf,lefthalf2)#add here
        mergeSort(righthalf,righthalf2)#add here

        i=0
        j=0
        k=0
        while i < len(lefthalf) and j < len(righthalf):
            if lefthalf[i] < righthalf[j]:
                price[k]=lefthalf[i]
                name[k]=lefthalf2[i]
                #add here
                i=i+1
            else:
                price[k]=righthalf[j]
                name[k]=righthalf2[j]
                #add here
                j=j+1
            k=k+1

        while i < len(lefthalf):
            price[k]=lefthalf[i]
            name[k]=lefthalf2[i]
            #add here
            i=i+1
            k=k+1

        while j < len(righthalf):
            price[k]=righthalf[j]
            name[k]=righthalf2[j]
            #add here
            j=j+1
            k=k+1
    #print("Merging ",price)

