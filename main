import tkinter as tk
import sys
from PIL import Image, ImageTk
import winsound
import time



def openImage(filename):
    image = Image.open(filename)
    tkImage = ImageTk.PhotoImage(image)
    return tkImage

def sound():    
    winsound.PlaySound("SystemExit", winsound.SND_ALIAS)

def getText(textFile):        
        try:
            f = open(textFile, "r")
            text = f.read()
            return text
        
        finally:
            f.close()
def destroyy():
    app.destroy()

def combine_funcs(*funcs):
    def combined_func(*args, **kwargs):
        for f in funcs:
            f(*args, **kwargs)
    return combined_func

global sec
sec = 1

class GameShop(tk.Tk):

    def __init__(self, *args, **kwargs):

        tk.Tk.__init__(self, *args,**kwargs)
        tk.Tk.iconbitmap(self, default = "icon.ico")
        container = tk.Frame(self)
        self.title("Game Shop")
        
        container.pack(side = "top", fill = "both", expand = True)
        container.grid_rowconfigure(0, weight = 1)
        container.grid_columnconfigure(0, weight = 1)

        self.frames = {}
        for F in (StartPage, InfoPage, SelectionPage, GamePage):
            
            frame = F(container, self)
            
            self.frames[F] = frame

            frame.grid(row = 0, column = 0, sticky = "nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()

def qf(stringtoprint):
    print(stringtoprint)

class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.menuBackGround = openImage('menuPage.png')
        self.menuIcon = openImage ('ps4.png')
        canvas1 = tk.Canvas(self, width = 1024, height = 768, bg = "white")
        canvas1.create_image(1024/2,768/2,image = self.menuBackGround)
        canvas1.pack()

        canvas1.create_text(512, 150, fill = 'grey6', font = ("fixedsys", 52, 'bold'), text = 'Welcome to the\nGame Shop',justify = 'center' )
        #canvas1.create_image(512,300,image = self.menuIcon)
        
        button1 = tk.Button(canvas1, text = "START GAME", font = ("fixedsys",18), command = lambda: controller.show_frame(SelectionPage), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        button1.place(x = 512, y = 500, height = 57, width = 292, anchor = 'n')
        button2 = tk.Button(canvas1, text = "INFORMATION",font = ("fixedsys",18), command = lambda: controller.show_frame(InfoPage), cursor = 'hand2',borderwidth=3, foreground= "white", bg = "DodgerBlue3", activebackground= "DodgerBlue2", activeforeground= "white")
        button2.place(x = 512, y = 575, height = 57, width = 292, anchor = 'n')
        button3 = tk.Button(canvas1, text = "EXIT GAME",font = ("fixedsys",18), command = lambda: destroyy(), cursor = 'hand2', borderwidth= 3,foreground= "white", bg = "firebrick4", activebackground= "firebrick3", activeforeground= "white")
        button3.place(x = 512, y = 650, height = 57, width = 292, anchor = 'n')


class InfoPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.infoBackGround = openImage('menuPage.png')
        self.backIcon = openImage('back.png')
        self.forwardIcon = openImage('for.png')
       

        canvas2 = tk.Canvas(self, width = 1024, height = 768, bg = "white")
        canvas2.create_image(1024/2,768/2,image = self.infoBackGround)
        canvas2.pack()

        canvas2.create_text(512, 100, fill = 'grey6', font = ("fixedsys", 48, "bold"), text = "INFORMATION", justify = 'center' )
        canvas2.create_text(512, 450, fill = 'grey6', font = ("fixedsys", 18), text = getText('text7.txt'),justify = 'center' )

        self.pageCount = 0
        buttonBack = tk.Button(canvas2, text = "<", font = ("fixedsys",18,'bold'),state = 'disabled', command = lambda : goBack(self.pageCount), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4", activebackground= "purple3", activeforeground= "white")
        buttonBack.place(x = 100,y = 430, height = 35, width = 35)
        buttonForward = tk.Button(canvas2, text = ">", font = ("fixedsys",18,'bold'), command = lambda : goForward(self.pageCount), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4", activebackground= "purple3", activeforeground= "white")
        buttonForward.place(x = 890,y = 430, height = 35, width = 35)
        changeableText = canvas2.create_text(512, 295, fill = 'grey6', font = ("fixedsys", 18), text = getText('text1.txt'), justify = 'center')

        button4 = tk.Button(canvas2, text = "START GAME", font = ("fixedsys",18), command = lambda: combine_funcs(controller.show_frame(SelectionPage), resetPages()), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        button4.place(x = 512, y = 575, height = 57, width = 292, anchor = 'n')
        button5 = tk.Button(canvas2, text = "BACK", font = ("fixedsys",18), command = lambda :combine_funcs( controller.show_frame(StartPage), resetPages()), cursor = 'hand2', borderwidth= 3,foreground= "white", bg = "dark orange", activebackground= "orange", activeforeground= "white")
        button5.place(x = 512, y = 650, height = 57, width = 292, anchor = 'n')

        def resetPages():###########################    BUG HERE   ################################ pages should reset when leaving info page
            self.pageCount = 0
            txt =getText('text1.txt')
            canvas2.itemconfigure(changeableText, text = txt)
            
        def goForward(count):
            #print(self.pageCount)
            self.pageCount = count + 1
            if  self.pageCount== 1:
                txt = getText('text2.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 2:
                txt = getText('text3.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 3:
                txt = getText('text4.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 4:
                txt = getText('text5.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount== 5:
                txt = getText('text6.txt')
                canvas2.itemconfigure(changeableText, text = txt)

            
            if  self.pageCount >0:
                buttonBack.config(state = 'normal')
            else:
                buttonBack.config(state = 'disabled')
                
            if self.pageCount < 5:
                buttonForward.config(state ='normal')
            else:
                buttonForward.config(state = 'disabled')

            
        def goBack(count):
            #print(self.pageCount)
            self.pageCount = count - 1
            if self.pageCount == 0:
                txt = getText('text1.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 1:
                txt = getText('text2.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 2:
                txt = getText('text3.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 3:
                txt = getText('text4.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 4:
                txt = getText('text5.txt')
                canvas2.itemconfigure(changeableText, text = txt)

            if self.pageCount > 0 :
                buttonBack.config(state = 'normal')
            else:
                buttonBack.config(state = 'disabled')
                
            if self.pageCount < 5:
                buttonForward.config(state = 'normal')
            else:
                buttonForward.config(state = 'disabled')

class SelectionPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.selectionBackGround = openImage('selectPage.png')
        self.miniShop = openImage('miniShop.png')
        self.selectno=openImage('sel0.jpg')
        self.selectyes=openImage('sel1.png')
        self.menu=openImage('menu.png')
        self.activatedAction = False
        self.activatedAdventure = False
        self.activatedIndie = False
        self.activatedPuzzle = False
        self.activatedSports = False
        self.posCount = 0
        self.entrypos = 0

        def setStart(pos):
            self.entrypos = pos
            print(str(self.entrypos))
        
        canvas3 = tk.Canvas(self, width = 1024, height = 768, bg = "lightBlue")
        canvas3.create_image(1024/2,768/2,image = self.selectionBackGround)
        canvas3.pack()

        #cButton1 = tk.Button(canvas3, text = "Action", font = ("fixedsys",12), command = lambda: expandGames(1), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4", activebackground= "purple3", activeforeground= "white")
        #cButton1.place(x = 450, y = 100, height = 35, width = 90)
        cButton2 = tk.Button(canvas3, text = "Adventure", font = ("fixedsys",12), command = lambda: expandGames(2), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton2.place(x = 550, y = 100, height = 35, width = 90)
        cButton3 = tk.Button(canvas3, text = "Indie", font = ("fixedsys", 12), command = lambda: expandGames(3), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton3.place(x = 650, y = 100, height = 35, width = 90)
        cButton4 = tk.Button(canvas3, text = "Puzzle", font = ("fixedsys", 12), command = lambda: expandGames(4), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton4.place(x = 750, y = 100, height = 35, width = 90)
        cButton5 = tk.Button(canvas3, text = "Sports", font = ("fixedsys",12), command = lambda: expandGames(5), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton5.place(x = 850, y = 100, height = 35, width = 90)

        canvas3.create_text(205, 62, fill = 'white', font = ("fixedsys", 24, "bold"), text = "YOUR SHOPPING LIST" )
        canvas3.create_text(690, 62, fill = 'white', font = ("fixedsys", 24, "bold"), text = "SELECT YOUR GAMES" )
        canvas3.create_text(700, 430, fill = 'white', font = ("fixedsys", 24, "bold"), text = "SELECT A STARTING POINT" )
        canvas3.create_image(1024/3*2+10,768/3*2+85,image = self.miniShop)
        pos1Button = tk.Button(canvas3,image = self.selectno ,state = 'normal', command = lambda: combine_funcs(pos1Button.config(image = self.selectyes),pos2Button.config(state = 'disabled'), setStart(1)), cursor = 'hand2', borderwidth = 3)
        pos2Button = tk.Button(canvas3,image = self.selectno ,state = 'normal', command = lambda: combine_funcs(pos2Button.config(image = self.selectyes),pos1Button.config(state = 'disabled'), setStart(2)), cursor = 'hand2', borderwidth = 3)
        pos1Button.place(x = 510, y = 498, height = 32, width = 32)
        pos2Button.place(x = 820, y = 614, height = 32, width = 32)

        confirmButton = tk.Button(canvas3, text = "CONFIRM", font = ("fixedsys",18), command = lambda: controller.show_frame(GamePage), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        confirmButton.place(x = 250, y = 665, height = 57, width = 230, anchor = 'n')
        confirmButton = tk.Button(canvas3,image = self.menu, command = lambda: controller.show_frame(StartPage), cursor = 'hand2',borderwidth=3)
        confirmButton.place(x = 80, y = 665, height = 57, width = 60, anchor = 'n')
        self.listBox1= tk.Listbox(canvas3, cursor = 'hand2', bg = 'purple', font = ("fixedsys", 12),fg = 'white', height = 6, selectmode = 'multiple', width = 11, selectbackground = 'forest green')
        self.id= 0
        for i in 'CS:GO   £23','GTA5    £40','XCOM2   £20', 'Call Of\nDuty    £10':
            self.listBox1.insert(self.id,i)
            self.id+=1
        self.listBox1.place(x = 450, y = 150)

        #actionGames= tk.Menubutton(canvas3, text = "Action",font = ("fixedsys",12),activebackground = "purple3", activeforeground = "white", bg = 'purple4', bd = 3, cursor = 'hand2', direction = 'left', fg= 'white', height = 1, justify = 'center',  width = 11)
        #actionGames.grid()
        #actionGames.menu = tk.Menu(actionGames, tearoff = 0)
        #actionGames['menu'] = actionGames.menu
        #actionGames.menu.add_checkbutton(label=  "game1")
        #actionGames.place(x = 450, y = 100, height = 35, width = 90)

        def expandGames(category):

            if category == 1:
                print(self.activatedAction)
                gameAc1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: intolist('game1.gif'), cursor = 'hand2', borderwidth = 3,state = 'normal')
                gameAc2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: intolist('game2.gif'), cursor = 'hand2', borderwidth = 3)
                gameAc3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameAc4 = tk.Button(canvas3, text = "4", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                if self.activatedAction == False:
                    gameAc1.place(x = 460, y = 150, height = 42, width = 66)
                    gameAc2.place(x = 460, y = 200, height = 42, width = 66)
                    gameAc3.place(x = 460, y = 250, height = 42, width = 66)
                    gameAc4.place(x = 460, y = 300, height = 42, width = 66)
                    self.activatedAction = True
                    print(self.activatedAction) 
                elif self.activatedAction == True:
                    gameAc1.config(state = 'disabled')
                    gameAc2.destroy()
                    gameAc3.destroy()
                    gameAc4.destroy()
                    self.activatedAction = False
                    

            if category == 2:
                print(self.activatedAdventure)
                gameAd1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameAd2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameAd3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameAd4 = tk.Button(canvas3, text = "4", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                if self.activatedAdventure == False:
                    gameAd1.place(x = 560, y = 150, height = 42, width = 66)
                    gameAd2.place(x = 560, y = 200, height = 42, width = 66)
                    gameAd3.place(x = 560, y = 250, height = 42, width = 66)
                    gameAd4.place(x = 560, y = 300, height = 42, width = 66)
                    self.activatedAdventure = True
                    
                elif self.activatedAdventure == True:
                    gameAd1.destroy()
                    gameAd2.destroy()
                    gameAd3.destroy()
                    gameAd4.destroy()
                    self.activatedAdventure = False

            if category == 3:
                print(self.activatedIndie)
                gameI1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameI2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameI3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                if self.activatedIndie == False:
                    gameI1.place(x = 660, y = 150, height = 42, width = 66)
                    gameI2.place(x = 660, y = 200, height = 42, width = 66)
                    gameI3.place(x = 660, y = 250, height = 42, width = 66)
                    self.activatedIndie = True
                    
                elif self.activatedIndie == True:
                    gameI1.destroy()
                    gameI2.destroy()
                    gameI3.destroy()
                    self.activatedIndie = False
                    
            if category == 4:
                print(self.activatedPuzzle)
                gameI1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameI2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameI3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                if self.activatedPuzzle == False:
                    gameI1.place(x = 760, y = 150, height = 42, width = 66)
                    gameI2.place(x = 760, y = 200, height = 42, width = 66)
                    gameI3.place(x = 760, y = 250, height = 42, width = 66)
                    self.activatedPuzzle = True
                    
                elif self.activatedPuzzle == True:
                    gameI1.destroy()
                    gameI2.destroy()
                    gameI3.destroy()
                    self.activatedPuzzle = False

            if category == 5:
                print(self.activatedSports)
                gameI1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameI2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                gameI3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: sound(), cursor = 'hand2', borderwidth = 3)
                if self.activatedSports == False:
                    gameI1.place(x = 860, y = 150, height = 42, width = 66)
                    gameI2.place(x = 860, y = 200, height = 42, width = 66)
                    gameI3.place(x = 860, y = 250, height = 42, width = 66)
                    self.activatedSports = True
                    
                elif self.activatedSports == True:
                    gameI1.destroy()
                    gameI2.destroy()
                    gameI3.destroy()
                    self.activatedSports= False
                    
        
        def intolist(game):
            self.imageG = openImage('game1.gif')
            canvas3.create_image(1024/2,768/2+self.posCount*50, image = self.imageG)
            self.posCount+=1
            print('asda')


class GamePage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.gameBackground = openImage('shop1.png')
        var = int()
        var2 = int()
        canvas4 = tk.Canvas(self, width = 1024, height = 768, bg = "white")
        canvas4.create_image(1024/2,768/2,image = self.gameBackground)
        canvas4.pack()
        startButton = tk.Button(canvas4, text = "START", font = ("fixedsys",18),state = 'disabled', command = lambda: combine_funcs(setTime(), self.minutes.destroy(), self.seconds.destroy(), showTime(), startButton.config(state = 'disabled')), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        startButton.place(x = 512, y = 694, height = 57, width = 292, anchor = 'n')
        timeLabel = tk.Label(canvas4, font = ("fixedsys",48),activebackground='grey10', activeforeground='white',background= 'grey10', foreground= 'white',justify= 'center')
        timeLabel.place(x = 550, y = 600)
        selectSorting1 = tk.Radiobutton(canvas4,variable = var, value = 1,selectcolor = 'purple', text="Shell sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(1), fg = 'white', cursor = 'hand2')
        selectSorting1.place (x = 700, y = 610)
        selectSorting2 = tk.Radiobutton(canvas4,variable = var, value = 2, selectcolor = 'purple', text="Quick sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(2), fg = 'white',cursor = 'hand2')
        selectSorting2.place (x = 700, y = 640)
        selectSorting3 = tk.Radiobutton(canvas4,variable = var,value = 3, selectcolor= 'purple', text="Merge sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(3), fg = 'white', cursor = 'hand2')
        selectSorting3.place (x = 700, y = 670)
        selectSorting4 = tk.Radiobutton(canvas4,variable = var2, value = 4,selectcolor = 'purple', text="Name sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(1), fg = 'white', cursor = 'hand2')
        selectSorting4.place (x = 850, y = 610)
        selectSorting5 = tk.Radiobutton(canvas4,variable = var2, value = 5, selectcolor = 'purple', text="Price sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(2), fg = 'white',cursor = 'hand2')
        selectSorting5.place (x = 850, y = 640)
        selectSorting6 = tk.Radiobutton(canvas4,variable = var2,value = 6, selectcolor= 'purple', text="Rating sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(3), fg = 'white', cursor = 'hand2')
        selectSorting6.place (x = 850, y = 670)




        
        self.minutes = tk.Spinbox (canvas4, from_=0, to = 10,cursor = 'hand2', fg = 'grey8', font = ("fixedsys",32), width = 2, command = lambda: startButton.config(state='normal'))
        self.minutes.place(x = 370, y = 620)
        self.seconds = tk.Spinbox (canvas4, from_=0, to = 59, cursor = 'hand2', fg = 'grey8', font = ("fixedsys",32), width = 2, command = lambda: startButton.config(state='normal'))
        self.seconds.place(x = 525, y = 620)

        def selectSorting(x):
            print(str(x))
        
        def setTime():
            global sec
            m = int(self.minutes.get())
            print(str(m))
            s = int(self.seconds.get())
            print(str(s))
            sec = m*60+s
    
        def showTime():
            global sec
            if sec >0:
                sec-=1
                timeLabel['text'] = sec
                canvas4.after(1000, showTime)
            else:
                controller.show_frame(StartPage)
                sec = 1
            
            canvas4.create_text(510,665,text = "Time Left:      s" ,font = ("fixedsys",24),fill = 'white',justify= 'center')
        timeLabel = tk.Label(canvas4, font = ("fixedsys",48),activebackground='grey10', activeforeground='white',background= 'grey10', foreground= 'white',justify= 'center')
        timeLabel.place(x = 545, y = 610)










        

app = GameShop()
app.mainloop()




