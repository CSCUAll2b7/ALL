import tkinter as tk
import sys
from PIL import Image, ImageTk
import winsound
import time



def openImage(filename):
    image = Image.open(filename)
    tkImage = ImageTk.PhotoImage(image)
    return tkImage

def sound():    
    winsound.PlaySound("SystemExit", winsound.SND_ALIAS)

def getText(textFile):        
        try:
            f = open(textFile, "r")
            text = f.read()
            return text
        
        finally:
            f.close()
def destroyy():
    app.destroy()

def combine_funcs(*funcs):
    def combined_func(*args, **kwargs):
        for f in funcs:
            f(*args, **kwargs)
    return combined_func

global sec
sec = 1  
global selectedGameList
selectedGameList = []
global imageDict
imageDict = {}

class Game():
    def __init__(self, ID, name, category, price, rating,imageName, x=0, y=0):
        self.ID = ID
        self.name = name
        self.categ = category
        self.price = price
        self.rating = rating
        self.imageName = imageName
        self.X = 0
        self.Y = 0

        imageDict[ID] = self.imageName
        

    def setCoord(self, x, y):
        
        self.X = x
        self.Y = y


class GameShop(tk.Tk):

    def __init__(self, *args, **kwargs):

        tk.Tk.__init__(self, *args,**kwargs)
        tk.Tk.iconbitmap(self, default = "icon.ico")
        container = tk.Frame(self)
        self.title("Game Shop")
        
        container.pack(side = "top", fill = "both", expand = True)
        container.grid_rowconfigure(0, weight = 1)
        container.grid_columnconfigure(0, weight = 1)

        self.frames = {}
        for F in (StartPage, InfoPage, SelectionPage, GamePage):
            
            frame = F(container, self)
            
            self.frames[F] = frame

            frame.grid(row = 0, column = 0, sticky = "nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()


class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.menuBackGround = openImage('menuPage.png')
        self.menuIcon = openImage ('ps4.png')
        canvas1 = tk.Canvas(self, width = 1024, height = 768, bg = "white")
        canvas1.create_image(1024/2,768/2,image = self.menuBackGround)
        canvas1.pack()

        canvas1.create_text(512, 150, fill = 'grey6', font = ("fixedsys", 52, 'bold'), text = 'Welcome to the\nGame Shop',justify = 'center' )
        #canvas1.create_image(512,300,image = self.menuIcon)
        
        button1 = tk.Button(canvas1, text = "START GAME", font = ("fixedsys",18), command = lambda: controller.show_frame(SelectionPage), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        button1.place(x = 512, y = 500, height = 57, width = 292, anchor = 'n')
        button2 = tk.Button(canvas1, text = "INFORMATION",font = ("fixedsys",18), command = lambda: controller.show_frame(InfoPage), cursor = 'hand2',borderwidth=3, foreground= "white", bg = "DodgerBlue3", activebackground= "DodgerBlue2", activeforeground= "white")
        button2.place(x = 512, y = 575, height = 57, width = 292, anchor = 'n')
        button3 = tk.Button(canvas1, text = "EXIT GAME",font = ("fixedsys",18), command = lambda: destroyy(), cursor = 'hand2', borderwidth= 3,foreground= "white", bg = "firebrick4", activebackground= "firebrick3", activeforeground= "white")
        button3.place(x = 512, y = 650, height = 57, width = 292, anchor = 'n')


class InfoPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.infoBackGround = openImage('menuPage.png')
        self.backIcon = openImage('back.png')
        self.forwardIcon = openImage('for.png')
       

        canvas2 = tk.Canvas(self, width = 1024, height = 768, bg = "white")
        canvas2.create_image(1024/2,768/2,image = self.infoBackGround)
        canvas2.pack()

        canvas2.create_text(512, 100, fill = 'grey6', font = ("fixedsys", 48, "bold"), text = "INFORMATION", justify = 'center' )
        canvas2.create_text(512, 450, fill = 'grey6', font = ("fixedsys", 18), text = getText('text7.txt'),justify = 'center' )

        self.pageCount = 0
        buttonBack = tk.Button(canvas2, text = "<", font = ("fixedsys",18,'bold'),state = 'disabled', command = lambda : goBack(self.pageCount), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4", activebackground= "purple3", activeforeground= "white")
        buttonBack.place(x = 100,y = 430, height = 35, width = 35)
        buttonForward = tk.Button(canvas2, text = ">", font = ("fixedsys",18,'bold'), command = lambda : goForward(self.pageCount), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4", activebackground= "purple3", activeforeground= "white")
        buttonForward.place(x = 890,y = 430, height = 35, width = 35)
        changeableText = canvas2.create_text(512, 295, fill = 'grey6', font = ("fixedsys", 18), text = getText('text1.txt'), justify = 'center')

        button4 = tk.Button(canvas2, text = "START GAME", font = ("fixedsys",18), command = lambda: combine_funcs(controller.show_frame(SelectionPage), resetPages()), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        button4.place(x = 512, y = 575, height = 57, width = 292, anchor = 'n')
        button5 = tk.Button(canvas2, text = "BACK", font = ("fixedsys",18), command = lambda :combine_funcs( controller.show_frame(StartPage), resetPages()), cursor = 'hand2', borderwidth= 3,foreground= "white", bg = "dark orange", activebackground= "orange", activeforeground= "white")
        button5.place(x = 512, y = 650, height = 57, width = 292, anchor = 'n')

        def resetPages():###########################    BUG HERE   ################################ pages should reset when leaving info page
            self.pageCount = 0
            txt =getText('text1.txt')
            canvas2.itemconfigure(changeableText, text = txt)
            
        def goForward(count):
            #print(self.pageCount)
            self.pageCount = count + 1
            if  self.pageCount== 1:
                txt = getText('text2.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 2:
                txt = getText('text3.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 3:
                txt = getText('text4.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 4:
                txt = getText('text5.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount== 5:
                txt = getText('text6.txt')
                canvas2.itemconfigure(changeableText, text = txt)

            
            if  self.pageCount >0:
                buttonBack.config(state = 'normal')
            else:
                buttonBack.config(state = 'disabled')
                
            if self.pageCount < 5:
                buttonForward.config(state ='normal')
            else:
                buttonForward.config(state = 'disabled')

            
        def goBack(count):
            #print(self.pageCount)
            self.pageCount = count - 1
            if self.pageCount == 0:
                txt = getText('text1.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 1:
                txt = getText('text2.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 2:
                txt = getText('text3.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 3:
                txt = getText('text4.txt')
                canvas2.itemconfigure(changeableText, text = txt)
            elif self.pageCount == 4:
                txt = getText('text5.txt')
                canvas2.itemconfigure(changeableText, text = txt)

            if self.pageCount > 0 :
                buttonBack.config(state = 'normal')
            else:
                buttonBack.config(state = 'disabled')
                
            if self.pageCount < 5:
                buttonForward.config(state = 'normal')
            else:
                buttonForward.config(state = 'disabled')

class SelectionPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.selectionBackGround = openImage('selectPage.png')
        self.miniShop = openImage('miniShop.png')
        self.selectno=openImage('sel0.jpg')
        self.selectyes=openImage('sel1.png')
        self.menu=openImage('menu.png')
        self.game1 = openImage('game1.gif')
        self.game2 = openImage('game2.gif')
        self.activatedAction = False
        self.activatedAdventure = False
        self.activatedIndie = False
        self.activatedPuzzle = False
        self.activatedSports = False
        self.posCount = 0
        self.entrypos = 0
        self.checkPass = False
        def setStart(pos):
            self.entrypos = pos
            print(str(self.entrypos))
        
        canvas3 = tk.Canvas(self, width = 1024, height = 768, bg = "lightBlue")
        canvas3.create_image(1024/2,768/2,image = self.selectionBackGround)
        canvas3.pack()

        cButton1 = tk.Button(canvas3, text = "Action", font = ("fixedsys",12), command = lambda: combine_funcs( expandGames(1),createGameButtons(1, self.activatedAction)), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4", activebackground= "purple3", activeforeground= "white")
        cButton1.place(x = 450, y = 100, height = 35, width = 90)
        cButton2 = tk.Button(canvas3, text = "Adventure", font = ("fixedsys",12), command = lambda: combine_funcs( expandGames(2),createGameButtons(2, self.activatedAdventure)), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton2.place(x = 550, y = 100, height = 35, width = 90)
        cButton3 = tk.Button(canvas3, text = "Indie", font = ("fixedsys", 12), command = lambda: combine_funcs(expandGames(3), createGameButtons(3, self.activatedIndie)), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton3.place(x = 650, y = 100, height = 35, width = 90)
        cButton4 = tk.Button(canvas3, text = "Puzzle", font = ("fixedsys", 12), command = lambda: combine_funcs(expandGames(4), createGameButtons(4, self.activatedPuzzle)), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton4.place(x = 750, y = 100, height = 35, width = 90)
        cButton5 = tk.Button(canvas3, text = "Sports", font = ("fixedsys",12), command = lambda: combine_funcs(expandGames(5), createGameButtons(5,self.activatedSports)), cursor = 'hand2', borderwidth = 3, foreground= "white", bg = "purple4",activebackground= "purple3",activeforeground= "white")
        cButton5.place(x = 850, y = 100, height = 35, width = 90)


        canvas3.create_text(205, 62, fill = 'white', font = ("fixedsys", 24, "bold"), text = "YOUR SHOPPING LIST" )
        canvas3.create_text(690, 62, fill = 'white', font = ("fixedsys", 24, "bold"), text = "SELECT YOUR GAMES" )
        canvas3.create_text(700, 430, fill = 'white', font = ("fixedsys", 24, "bold"), text = "SELECT A STARTING POINT" )
        canvas3.create_image(1024/3*2+10,768/3*2+85,image = self.miniShop)
        
        pos1Button = tk.Button(canvas3,image = self.selectno ,state = 'normal', command = lambda: combine_funcs(pos1Button.config(image = self.selectyes),pos2Button.config(image = self.selectno),confirm(), setStart(1)), cursor = 'hand2', borderwidth = 3)
        pos2Button = tk.Button(canvas3,image = self.selectno ,state = 'normal', command = lambda: combine_funcs(pos2Button.config(image = self.selectyes),pos1Button.config(image = self.selectno),confirm(), setStart(2)), cursor = 'hand2', borderwidth = 3)
        pos1Button.place(x = 510, y = 498, height = 32, width = 32)
        pos2Button.place(x = 820, y = 614, height = 32, width = 32)

        confirmButton = tk.Button(canvas3, text = "CONFIRM", font = ("fixedsys",18), command = lambda: controller.show_frame(GamePage), state = 'disabled', cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        confirmButton.place(x = 250, y = 665, height = 57, width = 230, anchor = 'n')
        infoButton = tk.Button(canvas3,image = self.menu, command = lambda: controller.show_frame(InfoPage), cursor = 'hand2',borderwidth=3)
        infoButton.place(x = 80, y = 665, height = 57, width = 60, anchor = 'n')
        
        self.gameAc1 = tk.Button(canvas3, image = self.game1 ,command = lambda:  combine_funcs(intolist(1),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameAc2 = tk.Button(canvas3, image = self.game2 ,command = lambda: combine_funcs(intolist(2),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameAc3 = tk.Button(canvas3, image = self.game2 ,command = lambda:combine_funcs(intolist(3),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameAc4 = tk.Button(canvas3, image = self.game2 ,command = lambda:combine_funcs(intolist(4),displayList()), cursor = 'hand2', borderwidth = 3)

        self.gameAd1 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(5),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameAd2 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(6),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameAd3 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(7),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameAd4 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(8),displayList()), cursor = 'hand2', borderwidth = 3)

        self.gameI1 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(9),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameI2 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(10),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameI3 = tk.Button(canvas3, image = self.game2,command = lambda: combine_funcs(intolist(11),displayList()), cursor = 'hand2', borderwidth = 3)

        self.gameP1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: combine_funcs(intolist(12),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameP2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: combine_funcs(intolist(13),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameP3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: combine_funcs(intolist(14),displayList()), cursor = 'hand2', borderwidth = 3)

        self.gameS1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: combine_funcs(intolist(15),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameS2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: combine_funcs(intolist(16),displayList()), cursor = 'hand2', borderwidth = 3)
        self.gameS3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: combine_funcs(intolist(17),displayList()), cursor = 'hand2', borderwidth = 3)
        
        def createGameButtons(cat, state):
            
            if cat == 1 and state == False:
                self.gameAc1 = tk.Button(canvas3, image = self.game2 ,command = lambda: intolist(1), cursor = 'hand2', borderwidth = 3)
                self.gameAc2 = tk.Button(canvas3, image = self.game2 ,command = lambda: intolist(2), cursor = 'hand2', borderwidth = 3)
                self.gameAc3 = tk.Button(canvas3, image = self.game2 ,command = lambda: intolist(3), cursor = 'hand2', borderwidth = 3)
                self.gameAc4 = tk.Button(canvas3, image = self.game2 ,command = lambda: intolist(4), cursor = 'hand2', borderwidth = 3)
                
            elif cat == 2 and state == False:
                self.gameAd1 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(5), cursor = 'hand2', borderwidth = 3)
                self.gameAd2 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(6), cursor = 'hand2', borderwidth = 3)
                self.gameAd3 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(7), cursor = 'hand2', borderwidth = 3)
                self.gameAd4 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(8), cursor = 'hand2', borderwidth = 3)
                
            elif cat == 3 and state == False:

                self.gameI1 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(9), cursor = 'hand2', borderwidth = 3)
                self.gameI2 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(10), cursor = 'hand2', borderwidth = 3)
                self.gameI3 = tk.Button(canvas3, image = self.game2,command = lambda: intolist(11), cursor = 'hand2', borderwidth = 3)

            elif cat == 4 and state == False:
                
                self.gameP1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: intolist(12), cursor = 'hand2', borderwidth = 3)
                self.gameP2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: intolist(13), cursor = 'hand2', borderwidth = 3)
                self.gameP3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: intolist(14), cursor = 'hand2', borderwidth = 3)

            elif cat == 5 and state == False:

                self.gameS1 = tk.Button(canvas3, text = "1", font = ("fixedsys", 12),command = lambda: intolist(15), cursor = 'hand2', borderwidth = 3)
                self.gameS2 = tk.Button(canvas3, text = "2", font = ("fixedsys", 12),command = lambda: intolist(16), cursor = 'hand2', borderwidth = 3)
                self.gameS3 = tk.Button(canvas3, text = "3", font = ("fixedsys", 12),command = lambda: intolist(17), cursor = 'hand2', borderwidth = 3)
            

        def expandGames(category):

            if category == 1:
                
                if self.activatedAction == False:
                    self.gameAc1.place(x = 460, y = 150, height = 42, width = 66)
                    self.gameAc2.place(x = 460, y = 200, height = 42, width = 66)
                    self.gameAc3.place(x = 460, y = 250, height = 42, width = 66)
                    self.gameAc4.place(x = 460, y = 300, height = 42, width = 66)

                elif self.activatedAction == True:
                    self.gameAc1.destroy()
                    self.gameAc2.destroy()
                    self.gameAc3.destroy()
                    self.gameAc4.destroy()

                if self.activatedAction == False:
                    self.activatedAction = True
                else:
                    self.activatedAction = False

                    

            if category == 2:
                
                if self.activatedAdventure == False:
                    self.gameAd1.place(x = 560, y = 150, height = 42, width = 66)
                    self.gameAd2.place(x = 560, y = 200, height = 42, width = 66)
                    self.gameAd3.place(x = 560, y = 250, height = 42, width = 66)
                    self.gameAd4.place(x = 560, y = 300, height = 42, width = 66)
                    
                elif self.activatedAdventure == True:
                    self.gameAd1.destroy()
                    self.gameAd2.destroy()
                    self.gameAd3.destroy()
                    self.gameAd4.destroy()

                if self.activatedAdventure == False:
                    self.activatedAdventure = True
                else:
                    self.activatedAdventure = False
                    

            if category == 3:
                
                if self.activatedIndie == False:
                    self.gameI1.place(x = 660, y = 150, height = 42, width = 66)
                    self.gameI2.place(x = 660, y = 200, height = 42, width = 66)
                    self.gameI3.place(x = 660, y = 250, height = 42, width = 66)
                    
                elif self.activatedIndie == True:
                    self.gameI1.destroy()
                    self.gameI2.destroy()
                    self.gameI3.destroy()

                if self.activatedIndie == False:
                    self.activatedIndie = True
                else:
                    self.activatedIndie = False
                    
            if category == 4:
                
                if self.activatedPuzzle == False:
                    self.gameP1.place(x = 760, y = 150, height = 42, width = 66)
                    self.gameP2.place(x = 760, y = 200, height = 42, width = 66)
                    self.gameP3.place(x = 760, y = 250, height = 42, width = 66)
                    
                elif self.activatedPuzzle == True:
                    self.gameP1.destroy()
                    self.gameP2.destroy()
                    self.gameP3.destroy()

                if self.activatedPuzzle == False:
                    self.activatedPuzzle = True
                else:
                    self.activatedPuzzle = False
                

            if category == 5:

                if self.activatedSports == False:
                    self.gameS1.place(x = 860, y = 150, height = 42, width = 66)
                    self.gameS2.place(x = 860, y = 200, height = 42, width = 66)
                    self.gameS3.place(x = 860, y = 250, height = 42, width = 66)
                    
                elif self.activatedSports == True:
                    self.gameS1.destroy()
                    self.gameS2.destroy()
                    self.gameS3.destroy()

                if self.activatedSports == False:
                    self.activatedSports = True
                else:
                    self.activatedSports = False
                    
        
        def intolist(gameID):
            #adds selected games into global list for selected games that will be submited for searching
            selectedGameList.append(gameID)

        def displayList():
            #prints on screen(shopping list) selected games
            global imageDict
            posx = 1024/2
            posy = 800/2
            for game in selectedGameList:                
                canvas3.create_image(posx, posy, image =  openImage(imageDict[game]))
                posy = posy + 100             

        def confirm():
            #makes 'confirm' button available only when game list is not empty and starting point is selected
            if len(selectedGameList)>0:
                confirmButton.config(state = 'normal')


class GamePage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)

        self.gameBackground = openImage('shop1.png')
        var = int()
        var2 = int()
        canvas4 = tk.Canvas(self, width = 1024, height = 768, bg = "white")
        canvas4.create_image(1024/2,768/2,image = self.gameBackground)
        canvas4.pack()
        startButton = tk.Button(canvas4, text = "START", font = ("fixedsys",18),state = 'disabled', command = lambda: combine_funcs(setTime(), self.minutes.destroy(), self.seconds.destroy(), showTime(), startButton.config(state = 'disabled')), cursor = 'hand2',borderwidth=3,foreground= "white", bg = "forest green", activebackground= "lime green", activeforeground= "white")
        startButton.place(x = 512, y = 694, height = 57, width = 292, anchor = 'n')
        timeLabel = tk.Label(canvas4, font = ("fixedsys",48),activebackground='grey10', activeforeground='white',background= 'grey10', foreground= 'white',justify= 'center')
        timeLabel.place(x = 550, y = 600)
        selectSorting1 = tk.Radiobutton(canvas4,variable = var, value = 1,selectcolor = 'purple', text="Shell sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(1), fg = 'white', cursor = 'hand2')
        selectSorting1.place (x = 700, y = 610)
        selectSorting2 = tk.Radiobutton(canvas4,variable = var, value = 2, selectcolor = 'purple', text="Quick sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(2), fg = 'white',cursor = 'hand2')
        selectSorting2.place (x = 700, y = 640)
        selectSorting3 = tk.Radiobutton(canvas4,variable = var,value = 3, selectcolor= 'purple', text="Merge sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSorting(3), fg = 'white', cursor = 'hand2')
        selectSorting3.place (x = 700, y = 670)
        selectSorting4 = tk.Radiobutton(canvas4,variable = var2, value = 1,selectcolor = 'pink', text="Name sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSortingBy(1), fg = 'white', cursor = 'hand2')
        selectSorting4.place (x = 850, y = 610)
        selectSorting5 = tk.Radiobutton(canvas4,variable = var2, value = 2, selectcolor = 'pink', text="Price sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSortingBy(2), fg = 'white',cursor = 'hand2')
        selectSorting5.place (x = 850, y = 640)
        selectSorting6 = tk.Radiobutton(canvas4,variable = var2,value = 3, selectcolor= 'pink', text="Rating sort", font = ("fixedsys",12), bg = 'grey10', command = lambda: selectSortingBy(3), fg = 'white', cursor = 'hand2')
        selectSorting6.place (x = 850, y = 670)
        
       
        self.minutes = tk.Spinbox (canvas4, from_=0, to = 10,cursor = 'hand2', fg = 'grey8', font = ("fixedsys",32), width = 2, command = lambda: startButton.config(state='normal'))
        self.minutes.place(x = 370, y = 620)
        self.seconds = tk.Spinbox (canvas4, from_=0, to = 59, cursor = 'hand2', fg = 'grey8', font = ("fixedsys",32), width = 2, command = lambda: startButton.config(state='normal'))
        self.seconds.place(x = 525, y = 620)

        def selectSorting(x):
            print(str(x))

        def selectSortingBy(x):
            print(str(x))
        
        def setTime():
            global sec
            m = int(self.minutes.get())
            print(str(m))
            s = int(self.seconds.get())
            print(str(s))
            sec = m*60+s
    
        def showTime():
            global sec
            if sec >0:
                sec-=1
                timeLabel['text'] = sec
                canvas4.after(1000, showTime)
            else:
                controller.show_frame(StartPage)
                sec = 1
            
            canvas4.create_text(510,665,text = "Time Left:      s" ,font = ("fixedsys",24),fill = 'white',justify= 'center')
        timeLabel = tk.Label(canvas4, font = ("fixedsys",48),activebackground='grey10', activeforeground='white',background= 'grey10', foreground= 'white',justify= 'center')
        timeLabel.place(x = 545, y = 610)

        def playerMovement():
            self.ScreenX1 = 100.0
            self.ScreenY1 = 36.0
            self.ScreenX2 = 990.0
            self.ScreenY2 = 325.0

            self.vx = 32.0
            self.vy = 32.0

            player = canvas4.create_image()

            canvas4.coords(player, x = x+self.vx , y = y + self.vy)
            pass














iGame1 = Game(1, 'CS:GO', 'Action', 23, 5,'game1.gif')
iGame2 = Game(2,'GTA 5', 'Action', 40, 5, 'game2.gif')
iGame3 = Game(3,'XCOM2', 'Action', 20, 4, 'game3.gif')
iGame4 = Game(4,'Call Of Duty','Action', 10, 3,'game4.gif' )
iGame5 = Game(5,'Sonic','Adventure', 4, 3,'game5.gif')
iGame6 = Game(6,'DayZ', 'Adventure',20, 2, 'game6.gif')
iGame7 = Game(7,'Witcher 3', 'Adventure',50, 4, 'game7.gif')
iGame8 = Game(8, 'Fall Out 4','Adventure', 40, 5, 'game8.gif')
iGame9 = Game(9, 'Limbo' ,'Indie',3,4,'game9.gif')
iGame10 = Game(10,'Undertale', 'Indie', 5, 4, 'game10.gif')
iGame11 = Game(11,'To The Moon','Indie', 2, 3, 'game11.gif')
iGame12 = Game(12,'Little Big Planet','Puzzle', 6, 2 , 'game12.gif')
iGame13 = Game(13,'Infra', 'Puzzle',11,2, 'game13.gif')
iGame14 = Game(14,'Puzzle Stages','Puzzle', 1,1,'game14.gif')
iGame15 = Game(15,'The Crew', 'Sports',13, 3, 'game15.gif')
iGame16 = Game(16,'Fifa 15','Sports', 25, 4, 'game16.gif')
iGame17 = Game(17,'Need for Speed','Sports', 5, 4, 'game17.gif')


app = GameShop()
app.mainloop()
